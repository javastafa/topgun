<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE sqlMap PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd" >
<sqlMap namespace="baddel_user_login_channels_token" >
	<resultMap id="baddel_user_login_channels_tokenResultMap" class="com.baddel.datalayer.model.BaddelUserLoginChannelsToken" >
		<result column="ID" property="id"/> <result column="userID" property="userid"/> <result column="loginChannelID" property="loginchannelid"/> <result column="token" property="token"/> 
	</resultMap>    
    <cacheModel  id="baddel_user_login_channels_tokenCache" type="OSCACHE" >
		<flushInterval  hours="24"/>
		<flushOnExecute statement="baddel_user_login_channels_token_insertSelective"/>
		<flushOnExecute statement="baddel_user_login_channels_token_updateByPrimaryKeySelective"/>
		<flushOnExecute statement="baddel_user_login_channels_token_deleteByid"/> <flushOnExecute statement="baddel_user_login_channels_token_deleteByuserid"/> <flushOnExecute statement="baddel_user_login_channels_token_deleteByloginchannelid"/> <flushOnExecute statement="baddel_user_login_channels_token_deleteBytoken"/> 
		<property name="reference-type" value="SOFT"/>        
    </cacheModel>

	<select id="baddel_user_login_channels_token_selectByid" resultMap="baddel_user_login_channels_tokenResultMap" cacheModel="baddel_user_login_channels_tokenCache"> select * from `baddel`.`baddel_user_login_channels_token` where `baddel`.`baddel_user_login_channels_token`.`ID` = #value# </select> <select id="baddel_user_login_channels_token_selectByuserid" resultMap="baddel_user_login_channels_tokenResultMap" cacheModel="baddel_user_login_channels_tokenCache"> select * from `baddel`.`baddel_user_login_channels_token` where `baddel`.`baddel_user_login_channels_token`.`userID` = #value# </select> <select id="baddel_user_login_channels_token_selectByloginchannelid" resultMap="baddel_user_login_channels_tokenResultMap" cacheModel="baddel_user_login_channels_tokenCache"> select * from `baddel`.`baddel_user_login_channels_token` where `baddel`.`baddel_user_login_channels_token`.`loginChannelID` = #value# </select> <select id="baddel_user_login_channels_token_selectBytoken" resultMap="baddel_user_login_channels_tokenResultMap" cacheModel="baddel_user_login_channels_tokenCache"> select * from `baddel`.`baddel_user_login_channels_token` where `baddel`.`baddel_user_login_channels_token`.`token` like #value# </select> 
	<select id="baddel_user_login_channels_token_max" resultClass="java.lang.Integer" > 
		select max(`ID`) as maxid from `baddel`.`baddel_user_login_channels_token`; 
	</select>
	<select id="baddel_user_login_channels_token_count" resultClass="java.lang.Integer" > 
		select count(*) from `baddel`.`baddel_user_login_channels_token`; 
	</select>
	<select id="baddel_user_login_channels_token_selectAll" resultMap="baddel_user_login_channels_tokenResultMap" cacheModel="baddel_user_login_channels_tokenCache" > 
		select * from `baddel`.`baddel_user_login_channels_token` ; 
	</select>

	<select id="baddel_user_login_channels_token_search" resultMap="baddel_user_login_channels_tokenResultMap" cacheModel="baddel_user_login_channels_tokenCache"> 
	select * from `baddel`.`baddel_user_login_channels_token` where $value$ 
	</select>

	<delete id="baddel_user_login_channels_token_deleteByid" > delete  from baddel.baddel_user_login_channels_token where `baddel`.`baddel_user_login_channels_token`.`ID` = #value# </delete> <delete id="baddel_user_login_channels_token_deleteByuserid" > delete  from baddel.baddel_user_login_channels_token where `baddel`.`baddel_user_login_channels_token`.`userID` = #value# </delete> <delete id="baddel_user_login_channels_token_deleteByloginchannelid" > delete  from baddel.baddel_user_login_channels_token where `baddel`.`baddel_user_login_channels_token`.`loginChannelID` = #value# </delete> <delete id="baddel_user_login_channels_token_deleteBytoken" > delete  from baddel.baddel_user_login_channels_token where `baddel`.`baddel_user_login_channels_token`.`token` like #value# </delete> 
	<insert id="baddel_user_login_channels_token_insertSelective" parameterClass="com.baddel.datalayer.model.BaddelUserLoginChannelsToken" >
		insert into `baddel`.`baddel_user_login_channels_token` 
		<dynamic prepend="(" > 
			 <isNotNull prepend="," property="userid" > `userID` </isNotNull> <isNotNull prepend="," property="loginchannelid" > `loginChannelID` </isNotNull> <isNotNull prepend="," property="token" > `token` </isNotNull>  )
		</dynamic>
		values 
		<dynamic prepend="(" > 
			 <isNotNull prepend="," property="userid" > #userid# </isNotNull> <isNotNull prepend="," property="loginchannelid" > #loginchannelid# </isNotNull> <isNotNull prepend="," property="token" > #token# </isNotNull>  ) 
		</dynamic> 
		<selectKey resultClass="java.lang.Integer" keyProperty="id"> 
		select last_insert_id() as ID
		</selectKey> 
	</insert>
	<update id="baddel_user_login_channels_token_updateByPrimaryKeySelective" parameterClass="com.baddel.datalayer.model.BaddelUserLoginChannelsToken" > 
		update `baddel`.`baddel_user_login_channels_token`
		<dynamic prepend="set" > 
			  <isNotNull prepend="," property="userid" > `userID` = #userid# </isNotNull> <isNotNull prepend="," property="loginchannelid" > `loginChannelID` = #loginchannelid# </isNotNull> <isNotNull prepend="," property="token" > `token` = #token# </isNotNull>  
		</dynamic> 
		where `baddel`.`baddel_user_login_channels_token`.`ID` = #id# 
		</update> 
</sqlMap>
