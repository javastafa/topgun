<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE sqlMap PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd" >
<sqlMap namespace="baddel_user" >
	<resultMap id="baddel_userResultMap" class="com.baddel.datalayer.model.BaddelUser" >
		<result column="ID" property="id"/> <result column="username" property="username"/> <result column="password" property="password"/> <result column="firstName" property="firstname"/> <result column="seconName" property="seconname"/> <result column="email" property="email"/> <result column="created" property="created"/> <result column="updated" property="updated"/> 
	</resultMap>    
    <cacheModel  id="baddel_userCache" type="OSCACHE" >
		<flushInterval  hours="24"/>
		<flushOnExecute statement="baddel_user_insertSelective"/>
		<flushOnExecute statement="baddel_user_updateByPrimaryKeySelective"/>
		<flushOnExecute statement="baddel_user_deleteByid"/> <flushOnExecute statement="baddel_user_deleteByusername"/> <flushOnExecute statement="baddel_user_deleteBypassword"/> <flushOnExecute statement="baddel_user_deleteByfirstname"/> <flushOnExecute statement="baddel_user_deleteByseconname"/> <flushOnExecute statement="baddel_user_deleteByemail"/> <flushOnExecute statement="baddel_user_deleteBycreated"/> <flushOnExecute statement="baddel_user_deleteByupdated"/> 
		<property name="reference-type" value="SOFT"/>        
    </cacheModel>

	<select id="baddel_user_selectByid" resultMap="baddel_userResultMap" cacheModel="baddel_userCache"> select * from `baddel`.`baddel_user` where `baddel`.`baddel_user`.`ID` = #value# </select> <select id="baddel_user_selectByusername" resultMap="baddel_userResultMap" cacheModel="baddel_userCache"> select * from `baddel`.`baddel_user` where `baddel`.`baddel_user`.`username` like #value# </select> <select id="baddel_user_selectBypassword" resultMap="baddel_userResultMap" cacheModel="baddel_userCache"> select * from `baddel`.`baddel_user` where `baddel`.`baddel_user`.`password` like #value# </select> <select id="baddel_user_selectByfirstname" resultMap="baddel_userResultMap" cacheModel="baddel_userCache"> select * from `baddel`.`baddel_user` where `baddel`.`baddel_user`.`firstName` like #value# </select> <select id="baddel_user_selectByseconname" resultMap="baddel_userResultMap" cacheModel="baddel_userCache"> select * from `baddel`.`baddel_user` where `baddel`.`baddel_user`.`seconName` like #value# </select> <select id="baddel_user_selectByemail" resultMap="baddel_userResultMap" cacheModel="baddel_userCache"> select * from `baddel`.`baddel_user` where `baddel`.`baddel_user`.`email` like #value# </select> <select id="baddel_user_selectBycreated" resultMap="baddel_userResultMap" cacheModel="baddel_userCache"> select * from `baddel`.`baddel_user` where `baddel`.`baddel_user`.`created` = #value# </select> <select id="baddel_user_selectByupdated" resultMap="baddel_userResultMap" cacheModel="baddel_userCache"> select * from `baddel`.`baddel_user` where `baddel`.`baddel_user`.`updated` = #value# </select> 
	<select id="baddel_user_max" resultClass="java.lang.Integer" > 
		select max(`ID`) as maxid from `baddel`.`baddel_user`; 
	</select>
	<select id="baddel_user_count" resultClass="java.lang.Integer" > 
		select count(*) from `baddel`.`baddel_user`; 
	</select>
	<select id="baddel_user_selectAll" resultMap="baddel_userResultMap" cacheModel="baddel_userCache" > 
		select * from `baddel`.`baddel_user` ; 
	</select>

	<select id="baddel_user_search" resultMap="baddel_userResultMap" cacheModel="baddel_userCache"> 
	select * from `baddel`.`baddel_user` where $value$ 
	</select>

	<delete id="baddel_user_deleteByid" > delete  from baddel.baddel_user where `baddel`.`baddel_user`.`ID` = #value# </delete> <delete id="baddel_user_deleteByusername" > delete  from baddel.baddel_user where `baddel`.`baddel_user`.`username` like #value# </delete> <delete id="baddel_user_deleteBypassword" > delete  from baddel.baddel_user where `baddel`.`baddel_user`.`password` like #value# </delete> <delete id="baddel_user_deleteByfirstname" > delete  from baddel.baddel_user where `baddel`.`baddel_user`.`firstName` like #value# </delete> <delete id="baddel_user_deleteByseconname" > delete  from baddel.baddel_user where `baddel`.`baddel_user`.`seconName` like #value# </delete> <delete id="baddel_user_deleteByemail" > delete  from baddel.baddel_user where `baddel`.`baddel_user`.`email` like #value# </delete> <delete id="baddel_user_deleteBycreated" > delete  from baddel.baddel_user where `baddel`.`baddel_user`.`created` = #value# </delete> <delete id="baddel_user_deleteByupdated" > delete  from baddel.baddel_user where `baddel`.`baddel_user`.`updated` = #value# </delete> 
	<insert id="baddel_user_insertSelective" parameterClass="com.baddel.datalayer.model.BaddelUser" >
		insert into `baddel`.`baddel_user` 
		<dynamic prepend="(" > 
			 <isNotNull prepend="," property="username" > `username` </isNotNull> <isNotNull prepend="," property="password" > `password` </isNotNull> <isNotNull prepend="," property="firstname" > `firstName` </isNotNull> <isNotNull prepend="," property="seconname" > `seconName` </isNotNull> <isNotNull prepend="," property="email" > `email` </isNotNull> <isNotNull prepend="," property="created" > `created` </isNotNull> <isNotNull prepend="," property="updated" > `updated` </isNotNull>  )
		</dynamic>
		values 
		<dynamic prepend="(" > 
			 <isNotNull prepend="," property="username" > #username# </isNotNull> <isNotNull prepend="," property="password" > #password# </isNotNull> <isNotNull prepend="," property="firstname" > #firstname# </isNotNull> <isNotNull prepend="," property="seconname" > #seconname# </isNotNull> <isNotNull prepend="," property="email" > #email# </isNotNull> <isNotNull prepend="," property="created" > #created# </isNotNull> <isNotNull prepend="," property="updated" > #updated# </isNotNull>  ) 
		</dynamic> 
		<selectKey resultClass="java.lang.Integer" keyProperty="id"> 
		select last_insert_id() as ID
		</selectKey> 
	</insert>
	<update id="baddel_user_updateByPrimaryKeySelective" parameterClass="com.baddel.datalayer.model.BaddelUser" > 
		update `baddel`.`baddel_user`
		<dynamic prepend="set" > 
			  <isNotNull prepend="," property="username" > `username` = #username# </isNotNull> <isNotNull prepend="," property="password" > `password` = #password# </isNotNull> <isNotNull prepend="," property="firstname" > `firstName` = #firstname# </isNotNull> <isNotNull prepend="," property="seconname" > `seconName` = #seconname# </isNotNull> <isNotNull prepend="," property="email" > `email` = #email# </isNotNull> <isNotNull prepend="," property="created" > `created` = #created# </isNotNull> <isNotNull prepend="," property="updated" > `updated` = #updated# </isNotNull>  
		</dynamic> 
		where `baddel`.`baddel_user`.`ID` = #id# 
		</update> 
</sqlMap>
